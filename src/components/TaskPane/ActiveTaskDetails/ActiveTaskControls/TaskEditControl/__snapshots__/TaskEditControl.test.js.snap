// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`shows a dropdown of editor choices if user has not configured an editor 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TaskEditControl
    activateKeyboardShortcutGroup={[Function]}
    deactivateKeyboardShortcutGroup={[Function]}
    intl={
        Object {
            "formatMessage": [Function],
          }
    }
    keyboardShortcutGroups={
        Object {
            "openEditor": Object {
              "editId": Object {
                "key": "e",
                "label": "Edit in Id",
              },
              "editJosm": Object {
                "key": "r",
                "label": "Edit in JOSM",
              },
              "editJosmLayer": Object {
                "key": "t",
                "label": "Edit in new JOSM layer",
              },
            },
            "taskCompletion": Object {
              "falsePositive": Object {
                "key": "q",
                "label": "Not an Issue",
              },
              "skip": Object {
                "key": "w",
                "label": "Skip",
              },
            },
            "taskEditing": Object {
              "cancel": Object {
                "key": "Escape",
                "keyLabel": "ESC",
                "label": "Cancel Editing",
              },
            },
          }
    }
    pickEditor={[Function]}
    task={
        Object {
            "id": 123,
            "parent": Object {
              "id": 321,
            },
            "status": 0,
          }
    }
    user={
        Object {
            "id": 357,
            "isLoggedIn": true,
            "settings": Object {},
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <button
        className="button edit-control large-and-wide full-width"
>
        <span
                className="control-icon"
                title="Fix"
        >
                <SvgSymbol
                        sym="edit-icon"
                        viewBox="0 0 20 20"
                />
        </span>
        <span
                className="control-label"
        >
                <FormattedMessage
                        defaultMessage="Fix"
                        id="Task.controls.fix.label"
                        values={Object {}}
                />
        </span>
</button>,
      "className": "editor-dropdown full-width",
      "eventTypes": Array [
        "mousedown",
        "touchstart",
      ],
      "excludeScrollbar": false,
      "onSelect": [Function],
      "options": Array [
        Object {
          "key": 0,
          "text": "Edit in iD",
          "value": 0,
        },
        Object {
          "key": 1,
          "text": "Edit in JOSM",
          "value": 1,
        },
        Object {
          "key": 2,
          "text": "Edit in new JOSM layer",
          "value": 2,
        },
      ],
      "outsideClickIgnoreClass": "ignore-react-onclickoutside",
      "preventDefault": false,
      "stopPropagation": false,
      "triggerClassName": "full-width",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <span
            className="control-icon"
            title="Fix"
>
            <SvgSymbol
                        sym="edit-icon"
                        viewBox="0 0 20 20"
            />
</span>,
          <span
            className="control-label"
>
            <FormattedMessage
                        defaultMessage="Fix"
                        id="Task.controls.fix.label"
                        values={Object {}}
            />
</span>,
        ],
        "className": "button edit-control large-and-wide full-width",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": "control-icon",
          "nodeType": "host",
          "props": Object {
            "children": <SvgSymbol
              sym="edit-icon"
              viewBox="0 0 20 20"
/>,
            "className": "control-icon",
            "title": "Fix",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "sym": "edit-icon",
              "viewBox": "0 0 20 20",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "span",
        },
        Object {
          "instance": null,
          "key": "control-label",
          "nodeType": "host",
          "props": Object {
            "children": <FormattedMessage
              defaultMessage="Fix"
              id="Task.controls.fix.label"
              values={Object {}}
/>,
            "className": "control-label",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "defaultMessage": "Fix",
              "id": "Task.controls.fix.label",
              "values": Object {},
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "span",
        },
      ],
      "type": "button",
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <button
          className="button edit-control large-and-wide full-width"
>
          <span
                    className="control-icon"
                    title="Fix"
          >
                    <SvgSymbol
                              sym="edit-icon"
                              viewBox="0 0 20 20"
                    />
          </span>
          <span
                    className="control-label"
          >
                    <FormattedMessage
                              defaultMessage="Fix"
                              id="Task.controls.fix.label"
                              values={Object {}}
                    />
          </span>
</button>,
        "className": "editor-dropdown full-width",
        "eventTypes": Array [
          "mousedown",
          "touchstart",
        ],
        "excludeScrollbar": false,
        "onSelect": [Function],
        "options": Array [
          Object {
            "key": 0,
            "text": "Edit in iD",
            "value": 0,
          },
          Object {
            "key": 1,
            "text": "Edit in JOSM",
            "value": 1,
          },
          Object {
            "key": 2,
            "text": "Edit in new JOSM layer",
            "value": 2,
          },
        ],
        "outsideClickIgnoreClass": "ignore-react-onclickoutside",
        "preventDefault": false,
        "stopPropagation": false,
        "triggerClassName": "full-width",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <span
              className="control-icon"
              title="Fix"
>
              <SvgSymbol
                            sym="edit-icon"
                            viewBox="0 0 20 20"
              />
</span>,
            <span
              className="control-label"
>
              <FormattedMessage
                            defaultMessage="Fix"
                            id="Task.controls.fix.label"
                            values={Object {}}
              />
</span>,
          ],
          "className": "button edit-control large-and-wide full-width",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "control-icon",
            "nodeType": "host",
            "props": Object {
              "children": <SvgSymbol
                sym="edit-icon"
                viewBox="0 0 20 20"
/>,
              "className": "control-icon",
              "title": "Fix",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "sym": "edit-icon",
                "viewBox": "0 0 20 20",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "span",
          },
          Object {
            "instance": null,
            "key": "control-label",
            "nodeType": "host",
            "props": Object {
              "children": <FormattedMessage
                defaultMessage="Fix"
                id="Task.controls.fix.label"
                values={Object {}}
/>,
              "className": "control-label",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "defaultMessage": "Fix",
                "id": "Task.controls.fix.label",
                "values": Object {},
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "span",
          },
        ],
        "type": "button",
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`shows an edit button for the user's configured editor 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TaskEditControl
    activateKeyboardShortcutGroup={[Function]}
    deactivateKeyboardShortcutGroup={[Function]}
    intl={
        Object {
            "formatMessage": [Function],
          }
    }
    keyboardShortcutGroups={
        Object {
            "openEditor": Object {
              "editId": Object {
                "key": "e",
                "label": "Edit in Id",
              },
              "editJosm": Object {
                "key": "r",
                "label": "Edit in JOSM",
              },
              "editJosmLayer": Object {
                "key": "t",
                "label": "Edit in new JOSM layer",
              },
            },
            "taskCompletion": Object {
              "falsePositive": Object {
                "key": "q",
                "label": "Not an Issue",
              },
              "skip": Object {
                "key": "w",
                "label": "Skip",
              },
            },
            "taskEditing": Object {
              "cancel": Object {
                "key": "Escape",
                "keyLabel": "ESC",
                "label": "Cancel Editing",
              },
            },
          }
    }
    pickEditor={[Function]}
    task={
        Object {
            "id": 123,
            "parent": Object {
              "id": 321,
            },
            "status": 0,
          }
    }
    user={
        Object {
            "id": 357,
            "isLoggedIn": true,
            "settings": Object {
              "defaultEditor": 1,
            },
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <span
          className="control-icon"
          title="Fix"
>
          <SvgSymbol
                    sym="edit-icon"
                    viewBox="0 0 20 20"
          />
</span>,
        <span
          className="control-label"
>
          <FormattedMessage
                    defaultMessage="Fix"
                    id="Task.controls.fix.label"
                    values={Object {}}
          />
</span>,
      ],
      "className": "button edit-control large-and-wide full-width",
      "onClick": [Function],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": "control-icon",
        "nodeType": "host",
        "props": Object {
          "children": <SvgSymbol
            sym="edit-icon"
            viewBox="0 0 20 20"
/>,
          "className": "control-icon",
          "title": "Fix",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "sym": "edit-icon",
            "viewBox": "0 0 20 20",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "span",
      },
      Object {
        "instance": null,
        "key": "control-label",
        "nodeType": "host",
        "props": Object {
          "children": <FormattedMessage
            defaultMessage="Fix"
            id="Task.controls.fix.label"
            values={Object {}}
/>,
          "className": "control-label",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "defaultMessage": "Fix",
            "id": "Task.controls.fix.label",
            "values": Object {},
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "span",
      },
    ],
    "type": "button",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <span
            className="control-icon"
            title="Fix"
>
            <SvgSymbol
                        sym="edit-icon"
                        viewBox="0 0 20 20"
            />
</span>,
          <span
            className="control-label"
>
            <FormattedMessage
                        defaultMessage="Fix"
                        id="Task.controls.fix.label"
                        values={Object {}}
            />
</span>,
        ],
        "className": "button edit-control large-and-wide full-width",
        "onClick": [Function],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": "control-icon",
          "nodeType": "host",
          "props": Object {
            "children": <SvgSymbol
              sym="edit-icon"
              viewBox="0 0 20 20"
/>,
            "className": "control-icon",
            "title": "Fix",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "sym": "edit-icon",
              "viewBox": "0 0 20 20",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "span",
        },
        Object {
          "instance": null,
          "key": "control-label",
          "nodeType": "host",
          "props": Object {
            "children": <FormattedMessage
              defaultMessage="Fix"
              id="Task.controls.fix.label"
              values={Object {}}
/>,
            "className": "control-label",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "defaultMessage": "Fix",
              "id": "Task.controls.fix.label",
              "values": Object {},
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "span",
        },
      ],
      "type": "button",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`shows edit control 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TaskEditControl
    activateKeyboardShortcutGroup={[Function]}
    deactivateKeyboardShortcutGroup={[Function]}
    intl={
        Object {
            "formatMessage": [Function],
          }
    }
    keyboardShortcutGroups={
        Object {
            "openEditor": Object {
              "editId": Object {
                "key": "e",
                "label": "Edit in Id",
              },
              "editJosm": Object {
                "key": "r",
                "label": "Edit in JOSM",
              },
              "editJosmLayer": Object {
                "key": "t",
                "label": "Edit in new JOSM layer",
              },
            },
            "taskCompletion": Object {
              "falsePositive": Object {
                "key": "q",
                "label": "Not an Issue",
              },
              "skip": Object {
                "key": "w",
                "label": "Skip",
              },
            },
            "taskEditing": Object {
              "cancel": Object {
                "key": "Escape",
                "keyLabel": "ESC",
                "label": "Cancel Editing",
              },
            },
          }
    }
    pickEditor={[Function]}
    task={
        Object {
            "id": 123,
            "parent": Object {
              "id": 321,
            },
            "status": 0,
          }
    }
    user={
        Object {
            "id": 357,
            "isLoggedIn": true,
            "settings": Object {
              "defaultEditor": 1,
            },
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <span
          className="control-icon"
          title="Fix"
>
          <SvgSymbol
                    sym="edit-icon"
                    viewBox="0 0 20 20"
          />
</span>,
        <span
          className="control-label"
>
          <FormattedMessage
                    defaultMessage="Fix"
                    id="Task.controls.fix.label"
                    values={Object {}}
          />
</span>,
      ],
      "className": "button edit-control large-and-wide full-width",
      "onClick": [Function],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": "control-icon",
        "nodeType": "host",
        "props": Object {
          "children": <SvgSymbol
            sym="edit-icon"
            viewBox="0 0 20 20"
/>,
          "className": "control-icon",
          "title": "Fix",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "sym": "edit-icon",
            "viewBox": "0 0 20 20",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "span",
      },
      Object {
        "instance": null,
        "key": "control-label",
        "nodeType": "host",
        "props": Object {
          "children": <FormattedMessage
            defaultMessage="Fix"
            id="Task.controls.fix.label"
            values={Object {}}
/>,
          "className": "control-label",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "defaultMessage": "Fix",
            "id": "Task.controls.fix.label",
            "values": Object {},
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "span",
      },
    ],
    "type": "button",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <span
            className="control-icon"
            title="Fix"
>
            <SvgSymbol
                        sym="edit-icon"
                        viewBox="0 0 20 20"
            />
</span>,
          <span
            className="control-label"
>
            <FormattedMessage
                        defaultMessage="Fix"
                        id="Task.controls.fix.label"
                        values={Object {}}
            />
</span>,
        ],
        "className": "button edit-control large-and-wide full-width",
        "onClick": [Function],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": "control-icon",
          "nodeType": "host",
          "props": Object {
            "children": <SvgSymbol
              sym="edit-icon"
              viewBox="0 0 20 20"
/>,
            "className": "control-icon",
            "title": "Fix",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "sym": "edit-icon",
              "viewBox": "0 0 20 20",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "span",
        },
        Object {
          "instance": null,
          "key": "control-label",
          "nodeType": "host",
          "props": Object {
            "children": <FormattedMessage
              defaultMessage="Fix"
              id="Task.controls.fix.label"
              values={Object {}}
/>,
            "className": "control-label",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "defaultMessage": "Fix",
              "id": "Task.controls.fix.label",
              "values": Object {},
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "span",
        },
      ],
      "type": "button",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
