// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`it renders the completed status of the task 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TaskDoneControls
    intl={
        Object {
            "formatMessage": [Function],
          }
    }
    nextTask={[Function]}
    task={
        Object {
            "id": 123,
            "parent": Object {
              "id": 321,
            },
            "status": 1,
          }
    }
    user={
        Object {
            "id": 357,
            "isLoggedIn": true,
            "settings": Object {
              "defaultEditor": 1,
            },
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="task-done-controls--task-status-message"
>
          undefined undefined
</div>,
        <div
          className="has-centered-children"
>
          <a
                    className="is-text task-done-controls__next"
                    onClick={[Function]}
                    title={undefined}
          >
                    <FormattedMessage
                              defaultMessage="Next Task"
                              id="ActiveTask.controls.nextTask.label"
                              values={Object {}}
                    />
                    <SvgSymbol
                              sym="forward-icon"
                              viewBox="0 0 20 20"
                    />
          </a>
</div>,
      ],
      "className": "task-done-controls",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "undefined undefined",
          "className": "task-done-controls--task-status-message",
        },
        "ref": null,
        "rendered": "undefined undefined",
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <a
            className="is-text task-done-controls__next"
            onClick={[Function]}
            title={undefined}
>
            <FormattedMessage
                        defaultMessage="Next Task"
                        id="ActiveTask.controls.nextTask.label"
                        values={Object {}}
            />
            <SvgSymbol
                        sym="forward-icon"
                        viewBox="0 0 20 20"
            />
</a>,
          "className": "has-centered-children",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <FormattedMessage
                defaultMessage="Next Task"
                id="ActiveTask.controls.nextTask.label"
                values={Object {}}
/>,
              <SvgSymbol
                sym="forward-icon"
                viewBox="0 0 20 20"
/>,
            ],
            "className": "is-text task-done-controls__next",
            "onClick": [Function],
            "title": undefined,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "defaultMessage": "Next Task",
                "id": "ActiveTask.controls.nextTask.label",
                "values": Object {},
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "sym": "forward-icon",
                "viewBox": "0 0 20 20",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "a",
        },
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="task-done-controls--task-status-message"
>
            undefined undefined
</div>,
          <div
            className="has-centered-children"
>
            <a
                        className="is-text task-done-controls__next"
                        onClick={[Function]}
                        title={undefined}
            >
                        <FormattedMessage
                                    defaultMessage="Next Task"
                                    id="ActiveTask.controls.nextTask.label"
                                    values={Object {}}
                        />
                        <SvgSymbol
                                    sym="forward-icon"
                                    viewBox="0 0 20 20"
                        />
            </a>
</div>,
        ],
        "className": "task-done-controls",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "undefined undefined",
            "className": "task-done-controls--task-status-message",
          },
          "ref": null,
          "rendered": "undefined undefined",
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <a
              className="is-text task-done-controls__next"
              onClick={[Function]}
              title={undefined}
>
              <FormattedMessage
                            defaultMessage="Next Task"
                            id="ActiveTask.controls.nextTask.label"
                            values={Object {}}
              />
              <SvgSymbol
                            sym="forward-icon"
                            viewBox="0 0 20 20"
              />
</a>,
            "className": "has-centered-children",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <FormattedMessage
                  defaultMessage="Next Task"
                  id="ActiveTask.controls.nextTask.label"
                  values={Object {}}
/>,
                <SvgSymbol
                  sym="forward-icon"
                  viewBox="0 0 20 20"
/>,
              ],
              "className": "is-text task-done-controls__next",
              "onClick": [Function],
              "title": undefined,
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "defaultMessage": "Next Task",
                  "id": "ActiveTask.controls.nextTask.label",
                  "values": Object {},
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "sym": "forward-icon",
                  "viewBox": "0 0 20 20",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "a",
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
